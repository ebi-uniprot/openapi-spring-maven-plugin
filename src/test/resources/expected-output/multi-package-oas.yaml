openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: localhost
  description: ' Default server url'
paths:
  /pet/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a pet when 0 < ID <= 10.  ID > 10 or nonintegers will simulate
        API error conditions
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        default:
          description: The pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
  /pet/bodyidnoannotation:
    post:
      summary: Add a new pet to the store passing an integer without parameter annotation
      operationId: addPetByIntegerNoAnnotation
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
      responses:
        405:
          description: Invalid input
  /methodWithTwoRequestBodyWithoutAnnotationAndTwoConsumes:
    post:
      summary: Create pet
      description: Creating pet.
      operationId: methodWithTwoRequestBodyWithoutAnnotationAndTwoConsumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pet'
  /methodWithOneSimpleRequestBody:
    delete:
      summary: Delete pet
      description: Deleting pet.
      operationId: methodWithOneSimpleRequestBody
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pet'
  /methodWithRequestBodyWithoutAnnotationAndTwoConsumes:
    put:
      summary: Modify pet
      description: Modifying pet.
      operationId: methodWithRequestBodyWithoutAnnotationAndTwoConsumes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /methodWithTwoRequestBodyWithAnnotationAndTwoConsumes:
    post:
      summary: Create pet
      description: Creating pet.
      operationId: methodWithTwoRequestBodyWithAnnotationAndTwoConsumes
      requestBody:
        description: Request Body User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Pet'
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma seperated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        schema:
          type: string
      responses:
        default:
          description: Pets matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
  /pet:
    put:
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
    post:
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        405:
          description: Invalid input
  /pet/bodynoannotation:
    post:
      summary: Add a new pet to the store no annotation
      operationId: addPetNoAnnotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        405:
          description: Invalid input
  /methodWithRequestBodyWithoutContentWithoutImplementation:
    get:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: methodWithRequestBodyWithoutContentWithoutImplementation
      parameters:
      - name: user
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/User'
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /pet/bodyid:
    post:
      summary: Add a new pet to the store passing an integer with generic parameter
        annotation
      operationId: addPetByInteger
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              type: integer
              format: int32
          application/xml:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        405:
          description: Invalid input
  /methodWithRequestBodyWithoutAnnotation:
    put:
      summary: Modify user
      description: Modifying user.
      operationId: methodWithRequestBodyWithoutAnnotation
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /methodWithoutRequestBodyAndTwoParameters:
    delete:
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: methodWithoutRequestBodyAndTwoParameters
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: code
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /methodWithRequestBodyAndTwoParameters:
    post:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: methodWithRequestBodyAndTwoParameters
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: code
        in: query
        required: true
        schema:
          type: string
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
  /methodWithRequestBodyWithoutContent:
    post:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: methodWithRequestBodyWithoutContent
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available,pending,sold
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
